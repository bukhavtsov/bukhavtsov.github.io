<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - ArtemCodes</title><link>https://artem.codes/posts/</link><description>All Posts | ArtemCodes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Oct 2024 21:03:06 +0200</lastBuildDate><atom:link href="https://artem.codes/posts/" rel="self" type="application/rss+xml"/><item><title>JWT Auth with Golang &amp; React</title><link>https://artem.codes/posts/jwt_auth/</link><pubDate>Tue, 08 Oct 2024 21:03:06 +0200</pubDate><author>Author</author><guid>https://artem.codes/posts/jwt_auth/</guid><description><![CDATA[<h1 id="json-web-tokens-jwt-authentication-with-golang-a-complete-guide">JSON Web Tokens (JWT) Authentication with Golang: A Complete Guide</h1>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/FbBmMg8AKUs?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<p>If you&rsquo;re curious about JSON Web Tokens (JWT) or looking to add authentication to your project, then this post is for you. Today, weâ€™ll explore JWT authentication and build an authentication server using Golang. We&rsquo;ll also cover how to connect it with the frontend. By the end of this guide, you&rsquo;ll be equipped to implement JWT for your own projects. So, grab a coffee and let&rsquo;s dive in!</p>]]></description></item><item><title>How to integrate Golang Service with Chat GPT API</title><link>https://artem.codes/posts/golang-server-with-chat-gpt-api/</link><pubDate>Wed, 01 May 2024 22:40:00 +0100</pubDate><author>Author</author><guid>https://artem.codes/posts/golang-server-with-chat-gpt-api/</guid><description><![CDATA[<h1 id="how-to-integrate-golang-service-with-chat-gpt-api">How to integrate Golang Service with Chat GPT API.</h1>


    
    <div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
      <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" loading="eager" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/bcJs56LmDCY?autoplay=0&controls=1&end=0&loop=0&mute=0&start=0" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="YouTube video"
      ></iframe>
    </div>

<h2 id="intro">Intro</h2>
<p>In this tutorial we&rsquo;re going to create a Golang service that communicates with Chat GPT API. The source code you can find <a href="https://github.com/bukhavtsov/golang-server-with-chat-gpt-api" target="_blank" rel="noopener noreffer ">here</a>. As a result you should be able to understand how to do it and change the logic for implementing your own use cases.</p>]]></description></item><item><title>The Incredible Two Pointers technique</title><link>https://artem.codes/posts/two-pointers/</link><pubDate>Sat, 01 Jul 2023 22:40:00 +0100</pubDate><author>Author</author><guid>https://artem.codes/posts/two-pointers/</guid><description><![CDATA[<h1 id="the-incredible-two-pointers-technique">The Incredible Two Pointers Technique</h1>
<p>Hey there, fellow learners! I&rsquo;m Artem, and today&rsquo;s lesson is all about the incredible Two Pointers technique.</p>
<h2 id="what-is-the-benefit-of-the-two-pointers-technique">What is the Benefit of the Two Pointers Technique?</h2>
<p>Before we dive deep into the details, let&rsquo;s first talk about the benefit of the Two Pointers technique. This technique can dramatically improve the performance of your solutions, allowing you to optimize algorithms with time complexities like <code>O(n^2)</code> or <code>O(n log n)</code> down to <code>O(n)</code> in many cases.</p>]]></description></item><item><title>Big O Notation Notes</title><link>https://artem.codes/posts/my-first-post/</link><pubDate>Sat, 26 Nov 2022 22:40:00 +0100</pubDate><author>Author</author><guid>https://artem.codes/posts/my-first-post/</guid><description><![CDATA[<p>Hello everybody and welcome back. My name is Artem and in this blog post we&rsquo;re going to understand what does Big O notation mean and consider the time complexity. So, Let&rsquo;s get to it!</p>
<h2 id="why-its-essential-to-understand-and-master-big-o">Why it&rsquo;s essential to understand and master Big O?</h2>
<ul>
<li>First, it allows you to determine the most efficient solution for task that you need to resolve.</li>
<li>Secondly, it potentially could help you to optimise an existing solution that you have implemented already.</li>
<li>Finally, most likely that you&rsquo;ll not pass a coding interview without mastering this topic.</li>
</ul>
<h2 id="big-o-definition">Big O definition</h2>
<p><strong>Big O time</strong> is the language and metric that describes the efficiency of algorithms.
Or to be more precise <strong>the way to describe how long algorithm performs as it&rsquo;s input size growth.</strong></p>]]></description></item></channel></rss>